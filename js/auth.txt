// auth.js
class AuthManager {
    constructor() {
        // Initialize Firebase
        const firebaseConfig = {
            apiKey: "AIzaSyB1dlHRhLA71PxCgVLjOieUcUF22DWx6zY",
            authDomain: "autonomy-heroes.firebaseapp.com",
            projectId: "autonomy-heroes",
            storageBucket: "autonomy-heroes.firebasestorage.app",
            messagingSenderId: "266526530869",
            appId: "1:266526530869:web:ea95143735be497ca8007c"
        };
        firebase.initializeApp(firebaseConfig);

        this.auth = firebase.auth();
        this.db = firebase.firestore();

        // Bind elements
        this.authContainer = document.getElementById('authContainer');
        this.calendarContainer = document.getElementById('calendarContainer');
        this.userEmailSpan = document.getElementById('userEmail');
        
        // Initialize auth state observer
        this.initAuthStateObserver();
        
        // Bind event listeners
        this.bindEvents();
    }

    initAuthStateObserver() {
        this.auth.onAuthStateChanged((user) => {
            if (user) {
                this.authContainer.classList.remove('active');
                this.calendarContainer.classList.add('active');
                this.userEmailSpan.textContent = user.email;
                
                // Initialize calendar if not already initialized
                if (!window.calendar) {
                    window.calendar = new TimeTrackingCalendar();
                }
            } else {
                this.authContainer.classList.add('active');
                this.calendarContainer.classList.remove('active');
                this.userEmailSpan.textContent = '';
                window.calendar = null;
            }
        });
    }

    bindEvents() {
        // Tab switching
        document.getElementById('loginTab').addEventListener('click', () => this.switchTab('login'));
        document.getElementById('registerTab').addEventListener('click', () => this.switchTab('register'));

        // Form submissions
        document.getElementById('loginForm').addEventListener('submit', (e) => this.handleLogin(e));
        document.getElementById('registerForm').addEventListener('submit', (e) => this.handleRegister(e));

        // Logout
        document.getElementById('logoutBtn').addEventListener('click', () => this.logout());
    }

    switchTab(tab) {
        const loginTab = document.getElementById('loginTab');
        const registerTab = document.getElementById('registerTab');
        const loginForm = document.getElementById('loginForm');
        const registerForm = document.getElementById('registerForm');

        if (tab === 'login') {
            loginTab.classList.add('active');
            registerTab.classList.remove('active');
            loginForm.classList.add('active');
            registerForm.classList.remove('active');
        } else {
            registerTab.classList.add('active');
            loginTab.classList.remove('active');
            registerForm.classList.add('active');
            loginForm.classList.remove('active');
        }
    }

    async handleLogin(e) {
        e.preventDefault();
        const email = document.getElementById('loginEmail').value;
        const password = document.getElementById('loginPassword').value;

        try {
            await this.auth.signInWithEmailAndPassword(email, password);
            // Success is handled by auth state observer
        } catch (error) {
            alert(error.message);
        }
    }

    async handleRegister(e) {
        e.preventDefault();
        const email = document.getElementById('regEmail').value;
        const password = document.getElementById('regPassword').value;
        const firstName = document.getElementById('regFirstName').value;
        const lastName = document.getElementById('regLastName').value;

        try {
            const userCredential = await this.auth.createUserWithEmailAndPassword(email, password);
            // Add user profile
            await this.db.collection('users').doc(userCredential.user.uid).set({
                firstName,
                lastName,
                email,
                createdAt: new Date().toISOString()
            });
            // Success is handled by auth state observer
        } catch (error) {
            alert(error.message);
        }
    }

    logout() {
        this.auth.signOut();
    }
}

// Initialize auth when the page loads
document.addEventListener('DOMContentLoaded', () => {
    new AuthManager();
});